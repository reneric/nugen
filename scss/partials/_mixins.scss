@mixin css-triangle ($direction: "down", $size: 20px, $color: #000) {
    width: 0; 
    height: 0;
    border-left: $size solid #{setTriangleColor($direction, "left", $color)};
    border-right: $size solid #{setTriangleColor($direction, "right", $color)};
    border-bottom: $size solid #{setTriangleColor($direction, "bottom", $color)};
    border-top: $size solid #{setTriangleColor($direction, "top", $color)};
}
 
@mixin columns($col, $gap...){
-webkit-column-count: $col;
-webkit-column-gap: $gap;
-moz-column-count: $col;
-moz-column-gap: $gap;
column-count: $col;
column-gap: $gap;
}

//Utility function to return the relevant colour depending on what type of arrow it is
@function setTriangleColor($direction, $side, $color) {
 
    @if $direction == "left" and $side == "right" 
    or  $direction == "right" and $side == "left" 
    or $direction == "down" and $side == "top" 
    or $direction == "up" and $side == "bottom" {
        @return $color
    } @else {
        @return "transparent";
    }
 
}

@mixin font($font,$size,$weight, $font-color...){
    font-family: $font;
    font-size: $size;
    font-weight: $weight;
    color: $font-color;
}

@mixin border-radius($radius){
    -webkit-border-radius: $radius;
    -moz-border-radius: $radius;
    border-radius: $radius;
}

@mixin opacity($trans) {
  // filter: alpha(opactiy=($trans*100));
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=#{$trans * 100})";
  -moz-opacity: $trans;
  -khtml-opacity: $trans;
  opacity: $trans;
}

@mixin button($width,$height, $bg, $text){
    width: $width;
    height: $height;
    background-color: $bg;
    color: $text;
}

@mixin border($width,$style,$color){
    border-width: $width;
    border-style: $style;
    border-color: $color;
}

@mixin box($widths,$heights, $bgs){
    width: $widths;
    height: $heights;
    background-color: $bgs;
}

@mixin round($diameter,$border){
    @include box($diameter, $diameter, transparent);
    @include border-radius($diameter);
    border:$border;
    overflow: hidden;
}

@mixin offset($x){
    margin-top: -$x;
    margin-left: -$x;
}

@mixin rotate($angle){
    -webkit-transform: $angle;
    -moz-transform: $angle;
    -ms-transform: $angle;
    -o-transform: $angle;
    transform: $angle;
}

@mixin transition($transition){
    -webkit-transition: $transition;
    -moz-transition: $transition;
    -ms-transition: $transition;
    -o-transition: $transition;
    transition: $transition;
}
@mixin transitions($transition,$transition2){
    -webkit-transition: $transition, $transition2;
    -moz-transition: $transition, $transition2;
    -ms-transition: $transition, $transition2;
    -o-transition: $transition, $transition2;
    transition: $transition, $transition2;
}

@mixin box-shadow($shadow){
    -webkit-box-shadow: $shadow;
    -moz-box-shadow: $shadow;
    box-shadow: $shadow;
}

@mixin gradient($from, $to) {
  background: -webkit-gradient(linear, left top, left bottom, from($from), to($to));
  background: -moz-linear-gradient(top,  $from, $to);
  filter:  progid:DXImageTransform.Microsoft.gradient(startColorstr='#{$from}', endColorstr='#{$to}');
}

@mixin border($width,$style,$color){
    border-width: $width;
    border-style: $style;
    border-color: $color;
}